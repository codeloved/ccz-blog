import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,e as t,b as l,a as s,d as a,w as h,r,o as p}from"./app-ta2cu9-p.js";const g={};function o(b,i){const n=r("Mermaid"),e=r("font");return p(),d("div",null,[i[35]||(i[35]=t('<h2 id="git存储方式" tabindex="-1"><a class="header-anchor" href="#git存储方式"><span>git存储方式</span></a></h2><ul><li>特点 <br> git保存的不是文件的变化或者差异, 而是一系列不同时刻的快照</li><li>blob对象 <br> 保存着文件的快照, 使用blob格式保存<strong>文件的内容</strong></li><li>树对象 <br> 保存着文件名和对应的blob对象引用地址, 使用<strong>树格式保存文件目录结构</strong></li><li>提交对象 <br> 保存着树对象引用地址和作者、提交信息等信息, 使用提交格式保存提交记录</li></ul>',2)),l(n,{id:"mermaid-25",code:"eJyNj7EKAjEMhvc+RXa54a67g7oITuouvVpq4JpCGxfFd7et9aAHghkCX/LnT6InFeMOlQ3KiSsGoxk9weEoSge23jlkeApIsToHY4BT+uCJA5IFdeebD01J5zHii4tWvKpVGa5Ge2KI+Kg+m8mPMKbUL3hYsJzNcqn/us1LiQ1xoxn+0Mifmvp9163L9aK8kKmsb3FoUYo3QFdpdQ=="}),s("ul",null,[s("li",null,[l(e,{color:"red"},{default:h(()=>i[0]||(i[0]=[a("总结")])),_:1}),i[1]||(i[1]=a()),i[2]||(i[2]=s("ol",null,[s("li",null,"git每次提交时, 会产生一个提交对象, 这个对象保存了提交的作者的姓名, 邮箱, 提交时输入的信息")],-1)),i[3]||(i[3]=s("ul",null,[s("li",null,"还保存了一个指向暂存对象(树对象)的指针, 这个树对象保存了所有文件的快照的引用和目录结构, 可以快速还原整个工作区"),s("li",null,"第一个提交对象没有指向父提交对象, 合并的提交对象指向2个父提交对象, 普通的提交有一个父提交对象"),s("li",null,"初始化数据库, 会有一个分支指针, master指向最后一个提交对象"),s("li",null,[a("存储结构总结为 提交对象 --> 树对象 --> 文件快照(Blob), 后面的讲解都是到提交对象, 不再涉及提交对象下级的对象 "),s("br"),a(" 只有提交对象和别的提交对象有关系, 树对象和Blob对象, 只和当前的提交对象有关系")])],-1)),i[4]||(i[4]=s("ol",{start:"2"},[s("li",null,"为了节省空间, 如果文件没有改变, 则文件不会产生新的Blob对象, 树对象的指向会复用原先的Blob对象")],-1))])]),i[36]||(i[36]=s("h2",{id:"分支的操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#分支的操作"},[s("span",null,"分支的操作")])],-1)),i[37]||(i[37]=s("ul",null,[s("li",null,[a("分支的本质 "),s("br"),a(" 分支的本质, 仅仅是指向提交对象的可变指针, 不保存任何分支相关的内容")])],-1)),l(n,{id:"mermaid-78",code:"eJxLy8kvT85ILCpRCPLhykwxjjYxTTMxiFXQ1bVTyEwxijZKMzFNhHENoy0SzUxTYrlyE4tLUougosZcZYZ6BnCOh6ujC5gDUcQFAH5tG0Q="}),s("ul",null,[s("li",null,[i[5]||(i[5]=t(`<p>分支创建 <br> 本质就是创建一个指针, 指向某个提交对象</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个指向当前提交对象的指针feat</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),l(n,{id:"mermaid-85",code:"eJxLy8kvT85ILCpRCPLhykwxjjYxTTMxiFXQ1bVTyEwxijZKMzFNhHENoy0SzUxTYrlyE4tLUougosZcZYZ6BnCOh6ujC5gDUcSVlppYAuRDZQEbTB7z"}),i[6]||(i[6]=s("p",null,"此时, v1.0, feat, master均指向最后一个提交, 那么如何区分当前在哪个分支上? HEAD指针指向的就是当前的分支",-1)),i[7]||(i[7]=s("ul",null,[s("li",null,[a("分支的本质, 查看.git/refs目录下可以得知, 分支名即为文件名, 分支指向的commit对象的hash值, 就是文件的内容 "),s("br"),a(" 所以新建一个分支, 就是在.git/refs目录下新建一个分支名的文件, 内部保存了commit对象的hash值")])],-1))]),i[8]||(i[8]=s("li",null,[s("p",null,[a("HEAD指针 "),s("br"),a(" 指向当前所在分支")])],-1))]),i[38]||(i[38]=t(`<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 此命令可以展示e380ee3 (HEAD -&gt; master, feat, v1.0), 可以知道此时分支是master, 也会列出指向该提交的其他分支指针</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --oneline</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("ul",null,[s("li",null,[i[9]||(i[9]=t('<p>分支切换 本质就是切换HEAD指针指向</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',2)),l(n,{id:"mermaid-110",code:"eJxLy8kvT85ILCpRCPLhykwxjjYxTTMxiFXQ1bVTyEwxijZKMzFNhHENoy0SzUxTYrlyE4tLUougosZcZYZ6BnBOWmpiCZAD5Xm4OrqApUDCXADYrR4H"}),i[10]||(i[10]=s("ul",null,[s("li",null,"分支切换会重置工作目录, 使得工作目录回到切换分支最后一次提交时的样子, 如果工作区有未提交内容且和切换分支有冲突, 切换分支会失败, 所以切换分支前, 最好先提交或者暂存当前工作目录")],-1))]),s("li",null,[l(e,{color:"red"},{default:h(()=>i[11]||(i[11]=[a("HEAD会随分支指针一起移动")])),_:1})])]),i[39]||(i[39]=s("p",null,"假设, 此时feat分支新增一个提交id4(3a4c5)",-1)),l(n,{id:"mermaid-127",code:"eJxLy8kvT85ILCpRCPLhykwxiTZONEk2jVXQ1bVTyEwxjjYxTTMxgHGNoo3STEwTYVzDaItEM9OUWK601MQSoBhY0ITLw9XRBawCJMyVm1hckloEM4+rzFDPAM4BAL1zIfk="}),i[40]||(i[40]=s("h2",{id:"分支的合并操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#分支的合并操作"},[s("span",null,"分支的合并操作")])],-1)),s("ul",null,[i[25]||(i[25]=t(`<li><p>简单命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建分支branch_name, 并且切换到branch_name分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch_name</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 相当于以下两条命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch_name</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1)),s("li",null,[i[16]||(i[16]=t(`<p>快速合并 <br> 本质是: 指针的移动, 不涉及合并操作, 没有冲突 <br> 假设场景, master分支最后提交为a3, 从a3处新开分支hotfix, hotfix修复bug, 提交了a4, 验证通过, 想要将hotfix合并回a3, 具体操作如下</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新开分支hotfix</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hotfix</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># hotfix提交</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;提交信息&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 切回master, 合并hotfix内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hotfix</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),l(n,{id:"mermaid-143",code:"eJxLy8kvT85ILCpRCPLhSjRR0NW1U0g0hlBGEMqQKzexuCS1CCrHlZFfkpZZAeGZcAEAWb8Rfg=="}),s("ol",null,[s("li",null,[i[13]||(i[13]=a("此时, git merge 日志会打印 ")),l(e,{color:"red"},{default:h(()=>i[12]||(i[12]=[a("Fast-forward")])),_:1})]),i[14]||(i[14]=s("li",null,"由于要合入的hotfix的a4提交, 可以直接走到master的a3提交, 所以合并hotfix分支, 只需要将master的指向右移到a4就可以, 这种合并方式, 只是指针的移动, 不需要合并操作, 不会产生冲突, 简单来说就是, master分支在新开hotfix分支后, 没有新的提交或者合入",-1)),i[15]||(i[15]=s("li",null,"合并后的结构如下",-1))]),l(n,{id:"mermaid-161",code:"eJxLy8kvT85ILCpRCPLhSjRR0NW1U0g0hlBGEMqQKzexuCS1CMIz4crIL0nLrIDxAFnPEX8="})]),s("li",null,[i[22]||(i[22]=s("p",null,"合并",-1)),s("ol",null,[i[19]||(i[19]=s("li",null,"假设从master的提交a3新开分支issue, 并且在issue上提交了a5, a6, 在master上有新的提交a4, 此时想将issue合并回master 由于从一个比较早的节点开出的分支issue, 此时master分支不再是issue的直接祖先, 也就是从issue不能直接通达master, 所以不能 适应快速合并",-1)),i[20]||(i[20]=s("li",null,"本质: 假如两个分支不能快速合并, 则会利用两个分支的末端提交(a4, a6)和公共祖先提交(a3), 做三方合并, 合并的结果生成一个新的快照提交(a7), 这个快照提交有两个父提交, 分别是这两个分支的末端提交(a4, a6)",-1)),s("li",null,[l(e,{color:"red"},{default:h(()=>i[17]||(i[17]=[a("注意:")])),_:1}),i[18]||(i[18]=a(" 非快速合并, 会产生一个新的合并提交快照"))]),i[21]||(i[21]=s("li",null,"合并前分支",-1))]),l(n,{id:"mermaid-188",code:"eJxTUEjLyS9PzkgsKlEI8uFSUEg0UdDVtVNINIZQRhDKECiTm1hckloE4ZuAVJpCVYLYZhC2KZCdWVxcmgrhmnEBAHz7FrM="}),i[23]||(i[23]=s("ol",{start:"5"},[s("li",null,"合并后分支")],-1)),l(n,{id:"mermaid-196",code:"eJxTUEjLyS9PzkgsKlEI8uFSUEg0UdDVtVNINIZQRhDKECRjCpUBsc0gbFMQ2xzCNkFimwHZmcXFpakIbm5icUlqEYRvzsUFAKDcG2A="}),i[24]||(i[24]=t(`<ol start="6"><li>冲突解决 <br> 注意: 如果在不同的分支中, 对同一个文件的同一部分做了修改, 合并时则会产生冲突 <br> 此时git会做合并,但是不会自动创建一个新的合并提交, 冲突文件大概如下</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD, HEAD代表当前分支 和 =======之间是当前分支的修改</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ======= 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; issue 之间代表 issue分支的修改, 也即传入的更改</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 可以选择手动修改冲突, 修改完要去掉标识,&lt;&lt;&lt;&lt;&lt;&lt;&lt; ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> HEAD</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;test1148&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  =======</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;test1142&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> issue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手动修改完冲突之后, 执行git add 文件名, 将文件标记为已解决, 并且执行 git commit完成合并提交, 生产合并提交节点</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用git add 文件名, 标记文件为已解决</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用git commit, 生成合并提交节点, 此时会打开提交信息页面, 可以修改提交信息, 也可以直接执行:wq, 使用默认提交信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])]),i[41]||(i[41]=s("h2",{id:"远程分支",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#远程分支"},[s("span",null,"远程分支")])],-1)),s("ul",null,[i[34]||(i[34]=t(`<li><p>简介 <br> 远程引用是对远程仓库的引用(分支, 标签等)</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 获取远程仓库信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">remot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>会显示如下信息</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">远程</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">获取地址：git@codeup.aliyun.com:xxx/xxx.git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">推送地址：git@codeup.aliyun.com:xxx/xxx.git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HEAD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分支：master</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">远程分支：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  activity</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                  已跟踪</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;git pull&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 配置的本地分支：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  activity</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 与远程</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> activity</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 合并</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;git push&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 配置的本地引用：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  activity</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 推送至</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> activity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (最新)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1)),s("li",null,[i[28]||(i[28]=t(`<p>远程跟踪分支 <br> 远程跟踪分支远程分支状态的引用, 本地无法移动, 只有和远程仓库进行了通信, 才会移动, 所以要获取最新的远程状态, 一定要先git fetch</p><ol><li>命名方式:</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 比如远程仓库origin的master分支的引用名称为origin/master</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;remote&gt;/&lt;branch&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),l(n,{id:"mermaid-237",code:"eJxLy8kvT85ILCpRCPLhSjZW0NW1U0g2glCGXLmJxSWpRRCeMVd+UWZ6Zp4+qiAAehsSyw=="}),l(e,{color:"red"},{default:h(()=>i[26]||(i[26]=[a("注意: ")])),_:1}),i[29]||(i[29]=a(" 只要不和远端服务器连接,比如git fetch等操作, origin/master 分支指针就不会移动和修改 \\")),i[30]||(i[30]=s("p",null,"比如, 本地master和远端master都有了新的提交, 但是没有fetch服务器, 那么本地master会移动, 但是origin/master不会移动",-1)),l(n,{id:"mermaid-243",code:"eJxLy8kvT85ILCpRCPLhSjZR0NW1U0g2hlBGEMqQKzexuCS1CMIz4covykzPzNNHFjTmAgDrJxQ7"}),i[31]||(i[31]=s("p",null,"此时使用 git fetch origin拉取远端分支, origin/master就会更新",-1)),l(n,{id:"mermaid-247",code:"eJxLy8kvT85ILCpRCPLhSjZR0NW1U0g2hlBGEMqQKzexuCS1CMIz4Uo2hariyi/KTM/M00eWNuUCAKndFk0="}),i[32]||(i[32]=t(`<ol start="2"><li>推送 <br> 语法: git push &lt;remote&gt; &lt;local_branch&gt;:&lt;remote_branch&gt; <br> 将本地分支(local_branch)推送到远端(remote)的分支remote_branch \\</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 推荐使用缩写方式, 代表将分支local_branch推送到远端的与local_branch相同的分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local_branch</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 -u 参数可以推送时设置远程跟踪分支, 下一次再提交时, 就可以直接使用 git push 推送到远端, 不需要带上remote local_branch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local_branch</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 下次提交时</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),l(e,{color:"red"},{default:h(()=>i[27]||(i[27]=[a("注意:")])),_:1}),i[33]||(i[33]=t(` <ul><li>本地分支直接使用分支名称</li><li>远端分支一般使用 远端仓库+空格+远端分支名称</li><li>远端在本地的远端跟踪分支, 使用 远端仓库简称 + / + 远端分支名称</li></ul><ol start="3"><li>拉取 <br> 使用 git fetch remote(origin) 可以拉取远端的分支信息, 假设远端新增了一个feat分支 <br> 此时会生成一个远端跟踪分支指针origin/feat</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用git merge 合并分支到当前分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin/feat</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 基于远程跟踪分支, 新开新的本地分支(feat), 并切换到新的本地分支</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> feat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin/feat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])])])}const c=k(g,[["render",o]]),A=JSON.parse('{"path":"/blog/tools/git/branch.html","title":"分支简介","lang":"zh-CN","frontmatter":{"title":"分支简介","article":false,"index":true,"order":4,"description":"git存储方式 特点 git保存的不是文件的变化或者差异, 而是一系列不同时刻的快照 blob对象 保存着文件的快照, 使用blob格式保存文件的内容 树对象 保存着文件名和对应的blob对象引用地址, 使用树格式保存文件目录结构 提交对象 保存着树对象引用地址和作者、提交信息等信息, 使用提交格式保存提交记录 git每次提交时, 会产生一个提交对象,...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"分支简介\\",\\"description\\":\\"git存储方式 特点 git保存的不是文件的变化或者差异, 而是一系列不同时刻的快照 blob对象 保存着文件的快照, 使用blob格式保存文件的内容 树对象 保存着文件名和对应的blob对象引用地址, 使用树格式保存文件目录结构 提交对象 保存着树对象引用地址和作者、提交信息等信息, 使用提交格式保存提交记录 git每次提交时, 会产生一个提交对象,...\\"}"],["meta",{"property":"og:url","content":"https://codeloved.github.io/ccz-blog/ccz-blog/blog/tools/git/branch.html"}],["meta",{"property":"og:site_name","content":"首页"}],["meta",{"property":"og:title","content":"分支简介"}],["meta",{"property":"og:description","content":"git存储方式 特点 git保存的不是文件的变化或者差异, 而是一系列不同时刻的快照 blob对象 保存着文件的快照, 使用blob格式保存文件的内容 树对象 保存着文件名和对应的blob对象引用地址, 使用树格式保存文件目录结构 提交对象 保存着树对象引用地址和作者、提交信息等信息, 使用提交格式保存提交记录 git每次提交时, 会产生一个提交对象,..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-15T15:44:19.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-15T15:44:19.000Z"}]]},"git":{"createdTime":1745505072000,"updatedTime":1747323859000,"contributors":[{"name":"ccz","username":"ccz","email":"ccz@email","commits":2,"url":"https://github.com/ccz"}]},"readingTime":{"minutes":7.9,"words":2369},"filePathRelative":"blog/tools/git/branch.md","excerpt":"<h2>git存储方式</h2>\\n<ul>\\n<li>特点 <br>\\ngit保存的不是文件的变化或者差异, 而是一系列不同时刻的快照</li>\\n<li>blob对象 <br>\\n保存着文件的快照, 使用blob格式保存<strong>文件的内容</strong></li>\\n<li>树对象 <br>\\n保存着文件名和对应的blob对象引用地址, 使用<strong>树格式保存文件目录结构</strong></li>\\n<li>提交对象 <br>\\n保存着树对象引用地址和作者、提交信息等信息, 使用提交格式保存提交记录</li>\\n</ul>\\n<ul>\\n<li>\\n <ol>\\n<li>git每次提交时, 会产生一个提交对象, 这个对象保存了提交的作者的姓名, 邮箱, 提交时输入的信息</li>\\n</ol>\\n<ul>\\n<li>还保存了一个指向暂存对象(树对象)的指针, 这个树对象保存了所有文件的快照的引用和目录结构, 可以快速还原整个工作区</li>\\n<li>第一个提交对象没有指向父提交对象, 合并的提交对象指向2个父提交对象, 普通的提交有一个父提交对象</li>\\n<li>初始化数据库, 会有一个分支指针, master指向最后一个提交对象</li>\\n<li>存储结构总结为 提交对象 --&gt; 树对象 --&gt; 文件快照(Blob), 后面的讲解都是到提交对象, 不再涉及提交对象下级的对象 <br>\\n只有提交对象和别的提交对象有关系, 树对象和Blob对象, 只和当前的提交对象有关系</li>\\n</ul>\\n<ol start=\\"2\\">\\n<li>为了节省空间, 如果文件没有改变, 则文件不会产生新的Blob对象, 树对象的指向会复用原先的Blob对象</li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,A as data};
