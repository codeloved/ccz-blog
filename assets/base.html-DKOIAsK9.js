import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as i,e,d as l,b as n,w as g,r,o as u}from"./app-DVVG4u63.js";const p={};function d(c,t){const a=r("Mermaid"),o=r("font");return u(),m("div",null,[t[10]||(t[10]=i("h2",{id:"文件状态",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#文件状态"},[i("span",null,"文件状态")])],-1)),i("ul",null,[t[1]||(t[1]=i("li",null,"跟踪文件: 已纳入版本控制管理的文件, 即在版本库中可以找到该文件, 并在未提交前可进行版本控制",-1)),t[2]||(t[2]=i("li",null,"未跟踪文件: 未纳入版本控制管理的文件, 即在版本库中找不到该文件, 不能进行版本控制",-1)),i("li",null,[t[0]||(t[0]=l("已忽略文件: 被版本控制管理系统忽略的文件, 不会纳入版本控制管理, 也不会被提交到版本库")),n(a,{id:"mermaid-18",code:"eJwrTi0sTc1LTnXJTEwvSszlKkgsKslMzixIzCtRCM0rKUpMzk5NUUgsVng2Z9WL7fNf7FiFpiQ3PyUzLROu5sn+dc+m7ERR44uk4un2TVhUBJckpsPln81qerp2BhcXwnZdXTs7qBorhfTMEoXElBSFZ9Pan+ze9nRCL1Ah3A1glTD7rBRSU4CK0zJzUrngbiBgFtQlaOaA1CXn5+ZmlmBYBnclRFVRam5+WSoXAAn4ic8="})]),t[3]||(t[3]=e("<li>查看当前文件状态: git status</li><li>移除文件 <ul><li>git rm 文件名: 从版本库中移除文件, 并将修改添加到暂存区</li><li>直接在工作区手动删除文件 <ul><li>此时使用git status, 提示添加到暂存区, 使用 git add 文件名, 状态变为和git status一致</li></ul></li><li>git rm --cached 文件名: 从版本库中移除文件, 但不删除文件, 只是从版本库中移除记录 <ul><li>适用于希望把文件从仓库中删除,但是又想保留在当前工作目录中的情况</li><li>比如先通过git rm --cached 删除文件, 再将文件放入.gitignore中, 提交之后, 文件就不会再被纳入版本控制管理</li></ul></li></ul></li><li>移动文件 <ul><li>git mv 文件名 新文件名: 移动文件, 并将修改添加到暂存区</li><li>区别: <ul><li>直接重命名文件, 不会跟踪文件移动操作, 使用git status, 会显示删除了原文件, 未跟踪新文件</li><li>git mv 使用git status 会显示重命名文件</li></ul></li></ul></li>",3))]),t[11]||(t[11]=e('<h2 id="撤销操作" tabindex="-1"><a class="header-anchor" href="#撤销操作"><span>撤销操作</span></a></h2><ul><li>git commit --amend <br> 用来修改最后一次的提交, 相当于用这次的提交替换掉上一次的提交, 如果这次提交没有内容, 那么相当于修改上次提交的提价信息</li><li>git reset HEAD 文件名 <br> 用来取消暂存区的修改, 回到上一次提交的状态 (比如使用git add 添加了不想提交的文件, 可以使用此命令撤销暂存区的修改)</li><li>git checkout -- 文件名 <br> 用来丢弃工作区的修改, 回到上一次提交的状态 (注意: 此命令不可恢复)</li></ul><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库"><span>远程仓库</span></a></h2>',3)),i("ul",null,[t[7]||(t[7]=i("li",null,[i("p",null,[l("git remote -v "),i("br"),l(" 查看远程仓库信息")])],-1)),t[8]||(t[8]=i("li",null,[i("p",null,[l("git remote add name url "),i("br"),l(" 添加远程仓库name, 并制定url路径 (远端仓库的分支就可以通过 name/branch 形式访问)")])],-1)),i("li",null,[t[5]||(t[5]=i("p",null,[l("git fetch remote(name) "),i("br"),l(" 从远端仓库获取最新数据, 但不合并到本地仓库, remote(name)就是添加时起的名字")],-1)),n(o,{color:"red"},{default:g(()=>t[4]||(t[4]=[l("注意:")])),_:1}),t[6]||(t[6]=l(" 所有远端的分支的操作, 都是通过name/branch的方式访问的, 要想拿到最新的远端数据, 需要先fetch操作"))]),t[9]||(t[9]=e("<li><p>git push remote(name) branch <br> 将当前分支推送到远端的branch分支, 如果使用了-u参数,就会将远端分支branch设置为当前分支的跟踪分支</p></li><li><p>git remote show remote(name) <br> 查看远程仓库的详细信息, 包括远端仓库的名称, 地址, 跟踪分支等</p></li><li><p>git remote rename old_name new_name <br> 远程仓库的名称修改</p></li><li><p>git remote remove name <br> 删除远程仓库</p></li>",4))]),t[12]||(t[12]=e('<h2 id="打标签" tabindex="-1"><a class="header-anchor" href="#打标签"><span>打标签</span></a></h2><ul><li>git tag <br> 查看所有标签</li><li>打标签 <ul><li>附注标签 <br> git tag -a v1.0 -m &quot;version 1.0&quot; 9fceb02 打一个名为v1.0的附注标签, 指向commit 9fceb02</li><li>轻量标签 <br> git tag v1.1 9fceb02 打一个名为v1.1的轻量标签, 指向commit 9fceb02</li></ul></li><li>推送标签 <ul><li>git push remote(name) --tags <br> 将所有标签推送到远端仓库</li><li>git push remote(name) tag_name <br> 将单个标签推送到远端仓库</li></ul></li><li>删除标签 <ul><li>git tag -d tag_name <br> 删除本地标签</li><li>git push origin --delete tag_name <br> 删除远端标签</li></ul></li><li>检出标签 git checkout -b branch_name tag_name <br> 检出指定标签为新分支, 并切换到该分支</li></ul>',2))])}const f=s(p,[["render",d]]),v=JSON.parse('{"path":"/blog/tools/git/base.html","title":"基础操作","lang":"zh-CN","frontmatter":{"title":"基础操作","article":false,"index":true,"order":2,"description":"文件状态 跟踪文件: 已纳入版本控制管理的文件, 即在版本库中可以找到该文件, 并在未提交前可进行版本控制 未跟踪文件: 未纳入版本控制管理的文件, 即在版本库中找不到该文件, 不能进行版本控制 已忽略文件: 被版本控制管理系统忽略的文件, 不会纳入版本控制管理, 也不会被提交到版本库 查看当前文件状态: git status 移除文件 git rm ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"基础操作\\",\\"description\\":\\"文件状态 跟踪文件: 已纳入版本控制管理的文件, 即在版本库中可以找到该文件, 并在未提交前可进行版本控制 未跟踪文件: 未纳入版本控制管理的文件, 即在版本库中找不到该文件, 不能进行版本控制 已忽略文件: 被版本控制管理系统忽略的文件, 不会纳入版本控制管理, 也不会被提交到版本库 查看当前文件状态: git status 移除文件 git rm ...\\"}"],["meta",{"property":"og:url","content":"https://codeloved.github.io/ccz-blog/ccz-blog/blog/tools/git/base.html"}],["meta",{"property":"og:site_name","content":"首页"}],["meta",{"property":"og:title","content":"基础操作"}],["meta",{"property":"og:description","content":"文件状态 跟踪文件: 已纳入版本控制管理的文件, 即在版本库中可以找到该文件, 并在未提交前可进行版本控制 未跟踪文件: 未纳入版本控制管理的文件, 即在版本库中找不到该文件, 不能进行版本控制 已忽略文件: 被版本控制管理系统忽略的文件, 不会纳入版本控制管理, 也不会被提交到版本库 查看当前文件状态: git status 移除文件 git rm ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-24T14:31:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-24T14:31:12.000Z"}]]},"git":{"createdTime":1745505072000,"updatedTime":1745505072000,"contributors":[{"name":"ccz","username":"ccz","email":"ccz@email","commits":1,"url":"https://github.com/ccz"}]},"readingTime":{"minutes":3.42,"words":1026},"filePathRelative":"blog/tools/git/base.md","excerpt":"<h2>文件状态</h2>\\n<ul>\\n<li>跟踪文件: 已纳入版本控制管理的文件, 即在版本库中可以找到该文件, 并在未提交前可进行版本控制</li>\\n<li>未跟踪文件: 未纳入版本控制管理的文件, 即在版本库中找不到该文件, 不能进行版本控制</li>\\n<li>已忽略文件: 被版本控制管理系统忽略的文件, 不会纳入版本控制管理, 也不会被提交到版本库</li>\\n<li>查看当前文件状态: git status</li>\\n<li>移除文件\\n<ul>\\n<li>git rm 文件名: 从版本库中移除文件, 并将修改添加到暂存区</li>\\n<li>直接在工作区手动删除文件\\n<ul>\\n<li>此时使用git status, 提示添加到暂存区, 使用 git add 文件名, 状态变为和git status一致</li>\\n</ul>\\n</li>\\n<li>git rm --cached 文件名: 从版本库中移除文件, 但不删除文件, 只是从版本库中移除记录\\n<ul>\\n<li>适用于希望把文件从仓库中删除,但是又想保留在当前工作目录中的情况</li>\\n<li>比如先通过git rm --cached 删除文件, 再将文件放入.gitignore中, 提交之后, 文件就不会再被纳入版本控制管理</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>移动文件\\n<ul>\\n<li>git mv 文件名 新文件名: 移动文件, 并将修改添加到暂存区</li>\\n<li>区别:\\n<ul>\\n<li>直接重命名文件, 不会跟踪文件移动操作, 使用git status, 会显示删除了原文件, 未跟踪新文件</li>\\n<li>git mv 使用git status 会显示重命名文件</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{f as comp,v as data};
